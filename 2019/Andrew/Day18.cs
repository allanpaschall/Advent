using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.IO;
namespace AoC2019
{
    public class Field
    {
        public string[] Map { get; set; }
        public Dictionary<FieldPoint, List<FieldPath>> FieldPaths
        {
            get
            {
                if (_fieldPaths.Count==0)
                {
                    //run
                    foreach (var k in from keylines in Map
                                      from key in keylines
                                      where char.IsLower(key) || key=='@' || char.IsNumber(key)
                                      select key)
                    {
                        _fieldPaths[GetPosition(k)] = CalculateFieldPaths(GetPosition(k));
                    }

                }
                return _fieldPaths;
            }
        }
        private Dictionary<FieldPoint, List<FieldPath>> _fieldPaths = new Dictionary<FieldPoint, List<FieldPath>>();
        public FieldPoint GetPosition(char c)
        {
            var startingLine = Map.Single(_ => _.Contains(c));
            var startingColumn = startingLine.IndexOf(c);
            var startingRow = Array.IndexOf(Map, startingLine);

            return new FieldPoint { X = startingColumn, Y = startingRow };
        }
        public List<FieldPath> CalculateFieldPaths(FieldPoint start)
        {
            var list = new List<FieldPath>();
            var visited = new HashSet<FieldPoint>();

            var q = new Queue<FieldPoint>();
            var s = new Queue<int>();
            var o = new Queue<int>();
            q.Enqueue(start);
            s.Enqueue(0);
            o.Enqueue(0);

            while (q.Count!=0)
            {
                var pos = q.Dequeue();
                var dist = s.Dequeue();
                var obst = o.Dequeue();

                if (visited.Contains(pos))
                {
                    continue;
                }

                visited.Add(pos);

                var c = Map[pos.Y][pos.X];

                if (c == '@' || c == '1' || c == '2' || c == '3' || c == '4')
                {
                    c = '.';
                }

                if (char.IsLower(c))
                {
                    list.Add(new FieldPath { Start = start, Distance = dist, Key = c, Obstacles = obst });

                    foreach (var p in pos.Around())
                    {
                        q.Enqueue(p);
                        s.Enqueue(dist + 1);
                        o.Enqueue(obst);
                    }
                }
                else if (char.IsUpper(c))
                {
                    foreach (var p in pos.Around())
                    {
                        q.Enqueue(p);
                        s.Enqueue(dist + 1);
                        o.Enqueue(obst |= (int)Math.Pow(2, (char.ToLower(c) - 'a')));
                    }
                }
                else if (c == '.')
                {
                    foreach (var p in pos.Around())
                    {
                        q.Enqueue(p);
                        s.Enqueue(dist + 1);
                        o.Enqueue(obst);
                    }
                }
            }

            return list;
        }

    }

    [DebuggerDisplay("{X}, {Y}")]
    public struct FieldPoint : IEquatable<FieldPoint>
    {
        public int X { get; set; }

        public int Y { get; set; }

        public bool Equals(FieldPoint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return X == other.X && Y == other.Y;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((FieldPoint)obj);
        }

        public override int GetHashCode()
        {
            return ("" + X + "~" + Y).GetHashCode();
        }

        public IEnumerable<FieldPoint> Around()
        {
            yield return new FieldPoint { X = X, Y = Y - 1 };
            yield return new FieldPoint { X = X - 1, Y = Y };
            yield return new FieldPoint { X = X + 1, Y = Y };
            yield return new FieldPoint { X = X, Y = Y + 1 };
        }
    }

    public class FieldPath
    {
        public FieldPoint Start { get; set; }
        public char Key { get; set; }
        public int Distance { get; set; }
        public int Obstacles { get; set; }
    }

    [DebuggerDisplay("{P1}")]
    public struct FieldRobots : IEquatable<FieldRobots>
    {
        //for part 1 this was just a point.......
        // then for part 2 we needed to keep track of 4 at once!
        //welcome to field robots!
        public FieldPoint P1 { get; set; }

        public FieldPoint P2 { get; set; }

        public FieldPoint P3 { get; set; }

        public FieldPoint P4 { get; set; }

        public FieldPoint this[int index]
        {
            get
            {
                switch (index)
                {
                    case 1: return P1;
                    case 2: return P2;
                    case 3: return P3;
                    case 4: return P4;
                }
                return P4;
            }
            set
            {
                switch (index)
                {
                    case 1:
                        P1 = value;
                        break;
                    case 2:
                        P2 = value;
                        break;
                    case 3:
                        P3 = value;
                        break;
                    case 4:
                        P4 = value;
                        break;
                }
            }
        }

        public FieldRobots Copy(int index, FieldPoint newValue)
        {
            var temp = this.Clone();
            temp[index] = newValue;
            return temp;
        }

        public FieldRobots Clone()
        {
            return new FieldRobots
            {
                P1 = P1,
                P2 = P2,
                P3 = P3,
                P4 = P4
            };
        }

        public bool Equals(FieldRobots other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Equals(P1, other.P1) && Equals(P2, other.P2) && Equals(P3, other.P3) && Equals(P4, other.P4);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((FieldRobots)obj);
        }

        public override int GetHashCode()
        {
            return ("" + P1 + "~" + P2 + "~" + P3 + "~" + P4).GetHashCode();
        }
    }


    public class Day18
    {

        public void Run()
        {
            var begin = DateTime.Now;
            Field field = new Field()
            {
                Map = Data.Replace("\r\n", "\n").Split('\n')
            };

            Console.WriteLine("Day 18,P1:" + CollectKeys(field, field.FieldPaths, GetKeyPositions(field, from keylines in field.Map
                                                                                                         from key in keylines
                                                                                                         where char.IsLower(key)
                                                                                                         select key), new[] { '@' }) + ", completed in " + (System.DateTime.Now - begin).TotalMilliseconds + " milliseconds");
            begin = DateTime.Now;
            Field field2 = new Field()
            {
                Map = Data2.Replace("\r\n", "\n").Split('\n')
            };

            Console.WriteLine("Day 18,P2:" + CollectKeys(field2, field2.FieldPaths, GetKeyPositions(field, from keylines in field2.Map
                                                                                                         from key in keylines
                                                                                                         where char.IsLower(key)
                                                                                                         select key), new[] { '1', '2', '3', '4' }) + ", completed in " + (System.DateTime.Now - begin).TotalMilliseconds + " milliseconds");


            /*lines = Data2.Replace("\r\n", "\n").Split('\n');
            keys = lines.SelectMany(_ => _.Where(char.IsLower)).ToList();

            dictionary = new Dictionary<FieldPoint, List<ReachableKey>>();

            for (var i = '1'; i <= '4'; i++)
            {
                dictionary[FindPositionOf(i, lines)] = ReachableKeys(lines, FindPositionOf(i, lines));
            }

            foreach (var k in keys)
            {
                dictionary[FindPositionOf(k, lines)] = ReachableKeys(lines, FindPositionOf(k, lines));
            }

            minimumSteps = CollectKeys(lines, dictionary, GetPositions(lines, keys), new[] { '1', '2', '3', '4' });
            Console.WriteLine("Day 18,P2:" + minimumSteps);*/
        }

        private Dictionary<char, FieldPoint> GetKeyPositions(Field field, IEnumerable<char> keys)
        {
            var dict = new Dictionary<char, FieldPoint>();

            foreach (var k in keys)
            {
                dict.Add(k, field.GetPosition(k));
            }

            return dict;
        }

        private int CollectKeys(Field field, Dictionary<FieldPoint, List<FieldPath>> keyPaths, Dictionary<char, FieldPoint> positions, char[] robots)
        {
            var startingSet = new FieldRobots();
            var index = 1;
            foreach (FieldPoint p in from r in robots select field.GetPosition(r))
            {
                startingSet[index++] = p;
            }

            var q = new Queue<State>();
            q.Enqueue(new State { Positions = startingSet, OwnedKeys = 0 });

            var visited = new Dictionary<State, int>();
            var finishValue = (int)Math.Pow(2,positions.Count)-1;

            List<int> finishedSteps = new List<int>();

            while (q.Count!=0)
            {
                var state = q.Dequeue();

                if (visited.TryGetValue(state, out int steps))
                {
                    //if we've obtained the same keys and are at the same spot:
                    if (steps <= state.Steps)
                    {
                        //bail if it is the same or larger.
                        continue;
                    }
                    else
                    {
                        //record this as the more efficient path...
                        visited[state] = state.Steps;
                    }
                }
                else
                {
                    visited.Add(state, state.Steps);
                }

                if (state.OwnedKeys == finishValue)
                {
                    finishedSteps.Add(state.Steps);
                    continue;
                }

                for (int i = 1; i <= robots.Length; i++)
                {
                    foreach (var k in keyPaths[state.Positions[i]])
                    {
                        var ki = (int)Math.Pow(2, k.Key - 'a');
                        if ((state.OwnedKeys & ki) == ki || (k.Obstacles & state.OwnedKeys) != k.Obstacles)
                        {
                            //This is a key we've already obtained, ||
                            //This key has an obstacle we haven't resolved yet.
                            continue;
                        }

                        q.Enqueue(new State
                        {
                            Positions = state.Positions.Copy(i, positions[k.Key]),
                            OwnedKeys = state.OwnedKeys | ki,
                            Steps = state.Steps + k.Distance
                        });
                    }
                }
            }

            return (from f in finishedSteps orderby f select f).First();
        }


        [DebuggerDisplay("{Positions} : {OwnedKeys} : {Steps}")]
        public struct State : IEquatable<State>
        {
            public FieldRobots Positions { get; set; }

            public int OwnedKeys { get; set; }

            public int Steps { get; set; }

            public bool Equals(State other)
            {
                if (ReferenceEquals(null, other)) return false;
                if (ReferenceEquals(this, other)) return true;
                return Equals(Positions, other.Positions) && Equals(OwnedKeys, other.OwnedKeys);
            }

            public override bool Equals(object obj)
            {
                if (ReferenceEquals(null, obj)) return false;
                if (ReferenceEquals(this, obj)) return true;
                if (obj.GetType() != this.GetType()) return false;
                return Equals((FieldRobots)obj);
            }

            public override int GetHashCode()
            {
                return ("" + Positions + "~~" + OwnedKeys).GetHashCode();
            }

        }





        public string Data = @"#################################################################################
#...#.............#...#.W...............#.#...#.....#.........#.#.......#.......#
#.#.#.#.#########.#.#.#.###############.#.#.#.#.#.#.#.#.#####.#.#.#####.#.###.#.#
#.#...#.#.......#.#.#.#.#.......#.......#...#.#.#.#.#.#g#...#.#.....#.#..d..#.#.#
#.#####.#.#####.#.#D#.#.#.###.###.#######.###.#.#.#.#.#.#.#.#.#####.#.#######.#.#
#v..#.#.#.#.#...#.#.#...#.#...#...#.....#...#...#.#.#.#.#.#.#.....#...#...#...#.#
###.#.#.#.#.#.#####.#####.###.#.###.###.###.#####.#.#.#.#.#U#####.#####.#.#.###.#
#...#...#.#.#.#...#...#.....#.#.#.....#.#...#...#.#.#.#.#.#...#...#.....#...#.#.#
#.#######.#.#.#.#.###.#.###.#C#.#######.#.###.#.#.#.#.###.###.#.###.#########.#.#
#...#...#.#.#...#...#.#.#...#.#..t......#.#.#.#...#.#...#.#x..#.#...#.........#.#
#.#.#.#.#.#.#######.#.#.#.###.#########.#.#.#.#########.#.#.###.#.###.#######.#.#
#.#.#.#...#.......#.#.#.#...#.#.....#...#...#.........#...#.#..a..#...#..w....#.#
###.#.#####.###.###.#.#.###.###.###.#.#####.#########.#####.#.#########.###.###.#
#...#...#...#...#...#.#.#...#...#...#...#e#.....#...#...#...#.#..o#.....#.#.#...#
#.#.###.#.###.###.###.#.#.###.###.#####.#.#####.#.#.###.#.#####.#.#.#####.#.#.###
#.#.#.#...#...#.F.#...#.#.....#.#.......#.#.....#.#.#...#.....X.#.#...#.....#.#.#
#.#.#.#####.###.###.#######.###.#########.#.#####.###.###########.###.###.###.#.#
#.#.....#.....#.#...#.G...#...#...#.....#.#.......#...#.........#...#...#...#...#
#.#.#####.#####.#.###.###.###.#.#.#.###.#.#######.#.###.#####.#####.#.#.#######T#
#.#.#.....#.....#.#..u#...#.#.#.#.#.#.#.#.#.L.....#.....#.#...#.....#.#...#.....#
#.#.#.#####.###.#.#.###.###.#.#.###.#.#.#.#.#############.#.###.#########.#.#####
#.#.#.....#.#...#.#...#.#.#...#.#.....#.#...#.............#.#.#.....#j..#.......#
#.#######.#.#.###A#####.#.#.###.#.#####.#.###.###########.#.#Q#.###.#.#.#######.#
#.......#.#.#...#.......#.#.#.......#...#...#.....#.......#.#.#.O.#...#.....#...#
#.#.#.###.#.#############.#.#########.#.###.#.###.#########.#.#############J#.###
#.#.#z#...#...............#.#...#...#.#.#.#.#.#...#...#.....#.....#k..N...#.#...#
#.#.###.###############.###.#.#.#.#.#.#.#.#.###.###.#.#.#.#######.#.#####.#.###.#
#.#...#...#.....#.......#...#.#...#...#.#.#.#...#...#...#.#....q..#...#.#.#.#...#
#####.###.#.###.#.#######.###.###########.#.#.###.###.#####.#######.#.#.#.#.#.###
#.......#.#.#.#.#.........#.............#.#.#...#.#...#...#.#.......#.#n..#.#.#c#
#.#.#####.#.#.#.###############.#######.#.#.#.#.#.#.###.#.#.#########.#.###.#.#.#
#.#.#...#...#.#.....#.........#.#...#...#.#.#.#.#.#...#.#.#.......K...#.....#...#
#.###.#.#####.#####.#####.###.#.#.#.#.#.#.#.###.#.#.###.#.#####################.#
#.#...#...#.......#.......#...#...#.#.#.#.#.#...#.#.#...#.................#.....#
#.#.###.###Y#.#############.#######.#.#.#.#.#.###.###.#######.#########.###.#####
#.#.#.#.....#.#...........#.#.....#.#.#.#.#.#.#...#...#.....#.#...#...#.#...#...#
#.#.#.#######.#.###.#####.#.#.#.#.###.#.#.#.#.#.#.#.###.###.#.#.#.#.#.###.###.#.#
#...#.......#...#.#...#...#.#.#.#...#.#.#...#.#.#.#.#.....#.#.#.#...#...#.....#i#
#M###.#####.#####.###.#####.###.###.#.#.#.###.#.###.#######.#.#.#######.#######.#
#....b#.............#...........#.....#.......#.............#.........#.........#
#######################################.@.#######################################
#.#.......#...#.......#.......#.....#.....#...#...............#.....B.....#.....#
#.#.#.###.#.###.#.###.#.#####.#.###.#.#.#.#.#.#.#####.#####.###.#.#########.###.#
#...#.#.....#...#.#.#.#.#...#.#.#...#.#.#...#.#.#.#...#.....#...#.#.....#...#.#.#
#H###.#.#####.###.#.#.#.###.#.#.#.###.#.#.###.#.#.#.#.#######.###.#.###.#.###.#.#
#.#...#...#...#.#.#.#.#.#...#...#.....#.#...#...#.#.#.#...#...#...#.#.#.#.#...#.#
#.#.#####.#.###.#.#.#.#.#.#############.###.#####.#.#.#.#.#.###.###.#.#.#.#.#.#.#
#.#.....#.#...#.#.#...#.#.....#.....#...#...#.....#.#.#.#.#.#.#...#...#...#.#.#.#
#.#####.#.###.#.#.###.#.#.#.###.###.#.#.#.#######.#.###.#.#.#.###.###.#####.#.#.#
#.....#.#.#.#.#.#...#.#.#.#...#...#.#.#.#.........#.....#.#.....#.#...#.....#.#f#
#######.#.#.#.#.###.###.#####.#.###.#.###########.#######.#.#####.#.#####.#.#.#.#
#.......#...#.....#.....#...#...#...#..l#.......#.#.......#.#.....#.#...#.#.#.#.#
#.#######.###.#####.#####.#.#####.#.###.#.#.#####.#.#####.#.#.#####.#.#.###.###.#
#...#.I.#.#...#...#.......#.......#.#...#.#.......#...#..y#.#...Z.#.#.#...#.#...#
###.#.###.#.###.#.#############.#####.#.#.###########.#####.#####.#.#V###.#.#.#.#
#...#.....#.#...#...#...........#.....#.#...E.......#.....#...#.#...#.#.....#.#.#
#.#######.#.#.#####.#####.#######.#################.#####.###.#.#####.#.#####.###
#...P...#.#.#.#...#.....#.#.....#...#...#.........#...#.#.....#..m..#.#.#...#...#
#.#####.###.#.#.#.#####.###.###.#.#.#.#.#.#.#########.#.#######.###.#.#R#.#.###.#
#.#.....#...#...#.#.......#.#.#.#.#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#
#.#.#####.#######.#######.#.#.#.#######.#.###.#.###.#####.#.#####.###.#.#.###.#.#
#.#.....#.....#.#...#.#.....#...#.......#...#.#.#.#.....#.#.#.#...#...#.#.#.#...#
#######.#####.#.###.#.#######.###.#########.#.#.#.#####.#.#.#.#.###.###.#.#.###.#
#.........#.#...#...#.....#.#...#.......#...#.#...#.....#...#.#.#...#...#.#.....#
#.#######.#.###.#.#.#####.#.###.#.#####.#.###.###.#.#####.###.#.###.#.###.###.###
#...#.........#.#.#...#...#.#...#...#.#.#.#.#...#.#.#.....#...#.#...#...#...#..p#
###.#.#########.#.#####.###.#.#####.#.#.#.#.###.#.#.#.#####.###.#.#####.###.###.#
#...#.#.........#.......#.#...#.......#.#.#...#.#.#.#.#.#...#.#.#.#...#.#.#...#.#
#.###.#.#################.#.#########.#.#.###.#.#.#.#.#.#.###.#.#.###.#.#.###.#.#
#...#.#.#.......#...#.....#.#.......#.#.#.#...#...#.#.#.#...#...#...#.....#.#.#.#
#.#.###.#.###.#.#.#.#####.#.###.###.#.#.#.#.#######.#.#.###.#.###.#.#####.#.#.###
#.#...#.#.#...#.#.#...#...#...#...#.#.#.#...#.....#.#...#...#.#...#...#.....#...#
#####.#.###.###.#.###.#.#.###.###.#.###.#.###.###.#.###.#.###.#######.#.#######.#
#..r#.#...#.#.....#...#s#...#.....#...#.#.#...#.#.#.#...#.#...#.......#.#...S...#
#.#.#.###.#.#######.###.#############.#.###.###.#.#.#.###.#.###.#######.#.#####.#
#.#.....#.#.#...#.#...#.........#...#.#.#...#.......#...#.#.....#.#.....#.#.#...#
#.#######.#.#.#.#.###.#.###.###.#.#.#.#.#.#############.#.#######.#.#####.#.#.###
#.#.....#.#...#.#.....#...#.#...#.#.#...#.....#...#...#.#.....#.....#..h..#.#.#.#
#.#.###.#.#####.#.#########.#.###.#.#####.###.#.#.#.#.#.#####.#######.#####.#.#.#
#.....#.........#...........#.....#.....#...#...#...#.......#.........#.........#
#################################################################################";

        public string Data2 = @"#################################################################################
#...#.............#...#.W...............#.#...#.....#.........#.#.......#.......#
#.#.#.#.#########.#.#.#.###############.#.#.#.#.#.#.#.#.#####.#.#.#####.#.###.#.#
#.#...#.#.......#.#.#.#.#.......#.......#...#.#.#.#.#.#g#...#.#.....#.#..d..#.#.#
#.#####.#.#####.#.#D#.#.#.###.###.#######.###.#.#.#.#.#.#.#.#.#####.#.#######.#.#
#v..#.#.#.#.#...#.#.#...#.#...#...#.....#...#...#.#.#.#.#.#.#.....#...#...#...#.#
###.#.#.#.#.#.#####.#####.###.#.###.###.###.#####.#.#.#.#.#U#####.#####.#.#.###.#
#...#...#.#.#.#...#...#.....#.#.#.....#.#...#...#.#.#.#.#.#...#...#.....#...#.#.#
#.#######.#.#.#.#.###.#.###.#C#.#######.#.###.#.#.#.#.###.###.#.###.#########.#.#
#...#...#.#.#...#...#.#.#...#.#..t......#.#.#.#...#.#...#.#x..#.#...#.........#.#
#.#.#.#.#.#.#######.#.#.#.###.#########.#.#.#.#########.#.#.###.#.###.#######.#.#
#.#.#.#...#.......#.#.#.#...#.#.....#...#...#.........#...#.#..a..#...#..w....#.#
###.#.#####.###.###.#.#.###.###.###.#.#####.#########.#####.#.#########.###.###.#
#...#...#...#...#...#.#.#...#...#...#...#e#.....#...#...#...#.#..o#.....#.#.#...#
#.#.###.#.###.###.###.#.#.###.###.#####.#.#####.#.#.###.#.#####.#.#.#####.#.#.###
#.#.#.#...#...#.F.#...#.#.....#.#.......#.#.....#.#.#...#.....X.#.#...#.....#.#.#
#.#.#.#####.###.###.#######.###.#########.#.#####.###.###########.###.###.###.#.#
#.#.....#.....#.#...#.G...#...#...#.....#.#.......#...#.........#...#...#...#...#
#.#.#####.#####.#.###.###.###.#.#.#.###.#.#######.#.###.#####.#####.#.#.#######T#
#.#.#.....#.....#.#..u#...#.#.#.#.#.#.#.#.#.L.....#.....#.#...#.....#.#...#.....#
#.#.#.#####.###.#.#.###.###.#.#.###.#.#.#.#.#############.#.###.#########.#.#####
#.#.#.....#.#...#.#...#.#.#...#.#.....#.#...#.............#.#.#.....#j..#.......#
#.#######.#.#.###A#####.#.#.###.#.#####.#.###.###########.#.#Q#.###.#.#.#######.#
#.......#.#.#...#.......#.#.#.......#...#...#.....#.......#.#.#.O.#...#.....#...#
#.#.#.###.#.#############.#.#########.#.###.#.###.#########.#.#############J#.###
#.#.#z#...#...............#.#...#...#.#.#.#.#.#...#...#.....#.....#k..N...#.#...#
#.#.###.###############.###.#.#.#.#.#.#.#.#.###.###.#.#.#.#######.#.#####.#.###.#
#.#...#...#.....#.......#...#.#...#...#.#.#.#...#...#...#.#....q..#...#.#.#.#...#
#####.###.#.###.#.#######.###.###########.#.#.###.###.#####.#######.#.#.#.#.#.###
#.......#.#.#.#.#.........#.............#.#.#...#.#...#...#.#.......#.#n..#.#.#c#
#.#.#####.#.#.#.###############.#######.#.#.#.#.#.#.###.#.#.#########.#.###.#.#.#
#.#.#...#...#.#.....#.........#.#...#...#.#.#.#.#.#...#.#.#.......K...#.....#...#
#.###.#.#####.#####.#####.###.#.#.#.#.#.#.#.###.#.#.###.#.#####################.#
#.#...#...#.......#.......#...#...#.#.#.#.#.#...#.#.#...#.................#.....#
#.#.###.###Y#.#############.#######.#.#.#.#.#.###.###.#######.#########.###.#####
#.#.#.#.....#.#...........#.#.....#.#.#.#.#.#.#...#...#.....#.#...#...#.#...#...#
#.#.#.#######.#.###.#####.#.#.#.#.###.#.#.#.#.#.#.#.###.###.#.#.#.#.#.###.###.#.#
#...#.......#...#.#...#...#.#.#.#...#.#.#...#.#.#.#.#.....#.#.#.#...#...#.....#i#
#M###.#####.#####.###.#####.###.###.#.#.#.###.#.###.#######.#.#.#######.#######.#
#....b#.............#...........#.....#1#2....#.............#.........#.........#
#################################################################################
#.#.......#...#.......#.......#.....#..3#4#...#...............#.....B.....#.....#
#.#.#.###.#.###.#.###.#.#####.#.###.#.#.#.#.#.#.#####.#####.###.#.#########.###.#
#...#.#.....#...#.#.#.#.#...#.#.#...#.#.#...#.#.#.#...#.....#...#.#.....#...#.#.#
#H###.#.#####.###.#.#.#.###.#.#.#.###.#.#.###.#.#.#.#.#######.###.#.###.#.###.#.#
#.#...#...#...#.#.#.#.#.#...#...#.....#.#...#...#.#.#.#...#...#...#.#.#.#.#...#.#
#.#.#####.#.###.#.#.#.#.#.#############.###.#####.#.#.#.#.#.###.###.#.#.#.#.#.#.#
#.#.....#.#...#.#.#...#.#.....#.....#...#...#.....#.#.#.#.#.#.#...#...#...#.#.#.#
#.#####.#.###.#.#.###.#.#.#.###.###.#.#.#.#######.#.###.#.#.#.###.###.#####.#.#.#
#.....#.#.#.#.#.#...#.#.#.#...#...#.#.#.#.........#.....#.#.....#.#...#.....#.#f#
#######.#.#.#.#.###.###.#####.#.###.#.###########.#######.#.#####.#.#####.#.#.#.#
#.......#...#.....#.....#...#...#...#..l#.......#.#.......#.#.....#.#...#.#.#.#.#
#.#######.###.#####.#####.#.#####.#.###.#.#.#####.#.#####.#.#.#####.#.#.###.###.#
#...#.I.#.#...#...#.......#.......#.#...#.#.......#...#..y#.#...Z.#.#.#...#.#...#
###.#.###.#.###.#.#############.#####.#.#.###########.#####.#####.#.#V###.#.#.#.#
#...#.....#.#...#...#...........#.....#.#...E.......#.....#...#.#...#.#.....#.#.#
#.#######.#.#.#####.#####.#######.#################.#####.###.#.#####.#.#####.###
#...P...#.#.#.#...#.....#.#.....#...#...#.........#...#.#.....#..m..#.#.#...#...#
#.#####.###.#.#.#.#####.###.###.#.#.#.#.#.#.#########.#.#######.###.#.#R#.#.###.#
#.#.....#...#...#.#.......#.#.#.#.#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#
#.#.#####.#######.#######.#.#.#.#######.#.###.#.###.#####.#.#####.###.#.#.###.#.#
#.#.....#.....#.#...#.#.....#...#.......#...#.#.#.#.....#.#.#.#...#...#.#.#.#...#
#######.#####.#.###.#.#######.###.#########.#.#.#.#####.#.#.#.#.###.###.#.#.###.#
#.........#.#...#...#.....#.#...#.......#...#.#...#.....#...#.#.#...#...#.#.....#
#.#######.#.###.#.#.#####.#.###.#.#####.#.###.###.#.#####.###.#.###.#.###.###.###
#...#.........#.#.#...#...#.#...#...#.#.#.#.#...#.#.#.....#...#.#...#...#...#..p#
###.#.#########.#.#####.###.#.#####.#.#.#.#.###.#.#.#.#####.###.#.#####.###.###.#
#...#.#.........#.......#.#...#.......#.#.#...#.#.#.#.#.#...#.#.#.#...#.#.#...#.#
#.###.#.#################.#.#########.#.#.###.#.#.#.#.#.#.###.#.#.###.#.#.###.#.#
#...#.#.#.......#...#.....#.#.......#.#.#.#...#...#.#.#.#...#...#...#.....#.#.#.#
#.#.###.#.###.#.#.#.#####.#.###.###.#.#.#.#.#######.#.#.###.#.###.#.#####.#.#.###
#.#...#.#.#...#.#.#...#...#...#...#.#.#.#...#.....#.#...#...#.#...#...#.....#...#
#####.#.###.###.#.###.#.#.###.###.#.###.#.###.###.#.###.#.###.#######.#.#######.#
#..r#.#...#.#.....#...#s#...#.....#...#.#.#...#.#.#.#...#.#...#.......#.#...S...#
#.#.#.###.#.#######.###.#############.#.###.###.#.#.#.###.#.###.#######.#.#####.#
#.#.....#.#.#...#.#...#.........#...#.#.#...#.......#...#.#.....#.#.....#.#.#...#
#.#######.#.#.#.#.###.#.###.###.#.#.#.#.#.#############.#.#######.#.#####.#.#.###
#.#.....#.#...#.#.....#...#.#...#.#.#...#.....#...#...#.#.....#.....#..h..#.#.#.#
#.#.###.#.#####.#.#########.#.###.#.#####.###.#.#.#.#.#.#####.#######.#####.#.#.#
#.....#.........#...........#.....#.....#...#...#...#.......#.........#.........#
#################################################################################";
    }
}